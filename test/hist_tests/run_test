#! /bin/bash

currdir="`pwd -P`"
scriptdir="$( cd $( dirname $0 ); pwd -P )"

##
## Option default values
##
defdir="build"
build_dir="${currdir}/${defdir}"
cleanup="PASS" # Other supported options are ALWAYS and NEVER
verbosity=0

##
## General syntax help function
## Usage: help <exit status>
##
help () {
  local hname="Usage: `basename ${0}`"
  local hprefix="`echo ${hname} | tr '[!-~]' ' '`"
  echo "${hname} [ --build-dir <dir name> ] [ --cleanup <opt> ]"
  hprefix="    "
  echo ""
  echo "${hprefix} <dir name>: Directory for building and running the test"
  echo "${hprefix}             default is <current directory>/${defdir}"
  echo "${hprefix} <opt>: Cleanup option is ALWAYS, NEVER, or PASS"
  echo "${hprefix}        default is PASS"
  exit $1
}

##
## Error output function (should be handed a string)
##
perr() {
  >&2 echo -e "\nERROR: ${@}\n"
  exit 1
}

##
## Cleanup the build and test directory
##
docleanup() {
  # We start off in the build directory
  if [ "${build_dir}" == "${currdir}" ]; then
    echo "WARNING: Cannot clean ${build_dir}"
  else
    cd ${currdir}
    rm -rf ${build_dir}
  fi
}

## Process our input arguments
while [ $# -gt 0 ]; do
  case $1 in
    --h | -h | --help | -help)
      help 0
      ;;
    --build-dir)
      if [ $# -lt 2 ]; then
        perr "${1} requires a build directory"
      fi
      build_dir="${2}"
      shift
      ;;
    --cleanup)
      if [ $# -lt 2 ]; then
        perr "${1} requies a cleanup option (ALWAYS, NEVER, PASS)"
      fi
      if [ "${2}" == "ALWAYS" -o "${2}" == "NEVER" -o "${2}" == "PASS" ]; then
        cleanup="${2}"
      else
        perr "Allowed cleanup options: ALWAYS, NEVER, PASS"
      fi
      shift
      ;;
    *)
      perr "Unrecognized option, \"${1}\""
      ;;
  esac
  shift
done

# Create the build directory, if necessary
if [ -d "${build_dir}" ]; then
  # Always make sure build_dir is not in the test dir
  if [ "$( cd ${build_dir}; pwd -P )" == "${currdir}" ]; then
    build_dir="${build_dir}/${defdir}"
  fi
else
  mkdir -p ${build_dir}
  res=$?
  if [ $res -ne 0 ]; then
    perr "Unable to create build directory, '${build_dir}'"
  fi
fi
build_dir="$( cd ${build_dir}; pwd -P )"
sampledir="${scriptdir}/sample_files"
if [ ! -d "${sampledir}" ]; then
  perr "No samples files directory found at '${sampledir}'"
fi

# cd to the build directory
cd ${build_dir}
res=$?
if [ $res -ne 0 ]; then
  perr "Unable to cd to build directory, '${build_dir}'"
fi
# Clean build directory
rm -rf *
res=$?
if [ $res -ne 0 ]; then
  perr "Unable to clean build directory, '${build_dir}'"
fi
# Run CMake
opts=""
cmake ${scriptdir} ${opts}
res=$?
if [ $res -ne 0 ]; then
  perr "CMake failed with exit code, ${res}"
fi
# Run make
make
res=$?
if [ $res -ne 0 ]; then
  perr "make failed with exit code, ${res}"
fi
# Run test with 1 task
mpirun -n 1 ./test_history ${sampledir}
res=$?
if [ $res -ne 0 ]; then
  perr "test_history with one task failed with exit code, ${res}"
fi
# Run test with 4 tasks
mpirun -n 4 ./test_history ${sampledir}
res=$?
if [ $res -ne 0 ]; then
  perr "test_history with four tasks failed with exit code, ${res}"
fi

if [ "${cleanup}" == "ALWAYS" ]; then
  docleanup
elif [ $res -eq 0 -a "${cleanup}" == "PASS" ]; then
  docleanup
fi

exit $res
