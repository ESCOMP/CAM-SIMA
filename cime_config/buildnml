#!/usr/bin/env python

"""
CAM namelist creator
"""
import sys
import os
import shutil
import logging

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)
# pylint: disable=wildcard-import, wrong-import-position
# pylint: disable=unused-wildcard-import
from standard_script_setup          import *
from CIME.XML.standard_module_setup import *
from CIME.buildnml                  import create_namelist_infile, parse_input
from CIME.case                      import Case
from CIME.utils                     import expect, run_cmd
from CIME.nmlgen                    import NamelistGenerator

# Save local (cime_config) directory path:
_CIME_CONFIG_PATH = os.path.dirname(os.path.abspath(__file__))

# Add local (cime_config) directory to python path:
sys.path.append(_CIME_CONFIG_PATH)

# Import CAM's configure structure:
from cam_config import ConfigCAM

# Open CIME case log:
_LOGGER = logging.getLogger(__name__)

#################
#HELPER FUNCTIONS
#################

# This simplifies the filename mangling for different cases.
def _create_ic_filename(inst_string, i_or_r,
                        run_refcase, run_refdate, run_reftod):
    return "{}.cam{}.{}.{}-{}.nc".format( \
    run_refcase, inst_string, i_or_r, run_refdate, run_reftod)

##################

def nml_attr_set(config):

    """
    creates a dictionary of namelist attributes
    from the CAM config object, in order to properly
    set namelist defaults.
    """

    #Create new namelist attribute dictionary:
    cam_nml_attr_dict = dict()

    if config:
        #Loop over all CAM configuration settings in config dictionary:
        for conf_name in config.config_dict:
            #Extract config setting info from dictionary:
            conf = config.config_dict[conf_name]

            #Determine if each configuration setting
            #is also a namelist attribute:
            if conf.is_nml_attr:
                #If so, then add to attribute dictionary:
                cam_nml_attr_dict[conf_name] = conf.value
            # End if
        # End for
    # End if
    #Return namelist attribute dictionary:
    return cam_nml_attr_dict

#################
#PRIMARY FUNCTION
#################

###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################
    # pylint: disable=too-many-locals
    """Build the cam namelist """

    # Build the component namelist
    if compname != "cam":
        emsg = "CAM buildnml called with model={}"
        raise AttributeError(emsg.format(compname))
    # End if
    # pylint: disable=bad-whitespace
    srcroot             = case.get_value("SRCROOT")
    rundir              = case.get_value("RUNDIR")
    din_loc_root        = case.get_value("DIN_LOC_ROOT")
    atm_ncpl            = case.get_value("ATM_NCPL")
    cam_namelist_opts   = case.get_value("CAM_NAMELIST_OPTS")
    cam_nml_use_case    = case.get_value("CAM_NML_USE_CASE")
    debug               = case.get_value("DEBUG")
    ninst_atm           = case.get_value("NINST_ATM")
    run_type            = case.get_value("RUN_TYPE")
    run_startdate       = case.get_value("RUN_STARTDATE")
    run_refcase         = case.get_value("RUN_REFCASE")
    run_refdate         = case.get_value("RUN_REFDATE")
    run_reftod          = case.get_value("RUN_REFTOD")
    # pylint: enable=bad-whitespace

    testsrc = os.path.join(srcroot, "components", "cam")
    if os.path.exists(testsrc):
        srcroot = testsrc

    #--------------------------------------------------------------------------
    # Call config_CAM to set the configuration options needed to
    #   generate CAM's namelist
    #--------------------------------------------------------------------------

    # Create CAM  configure object:
    config = ConfigCAM(case, _LOGGER)

    #----------------------------------------------------------
    #Auto-generate model code and meta-data needed for namelist:
    #----------------------------------------------------------

    #Set number of spaces used to indicate scope in generated code:
    gen_indent = 3

    #Generate model code and meta-data:
    config.generate_cam_src(gen_indent)

    #-----------------------------------------------------------------
    # Create namelist attribute dictionary (to set namelist defaults):
    #-----------------------------------------------------------------

    cam_nml_dict = nml_attr_set(config)

    #---------------------------------
    # Construct the namelist generator:
    #---------------------------------

    # Determine directory for user modified namelist_definition_cam.xml:
    user_xml_dir = os.path.join(caseroot, "SourceMods", "src.cam")
    expect(os.path.isdir(user_xml_dir),
           "user_xml_dir %s does not exist " %user_xml_dir)

    # User definition *replaces* existing definition:
    user_definition = os.path.join(user_xml_dir, "namelist_definition_cam.xml")
    if os.path.isfile(user_definition):
        # Print message to logger:
        _LOGGER.info("     ...found namelist definition file in %s",
                     user_xml_dir)

        # Set definition file:
        definition_file = [user_definition]
    else:
        # If no user-defined file exists, then use standard file:
        definition_file = [os.path.join(_CIME_CONFIG_PATH,
                                        "namelist_definition_cam.xml")]

        # Check that the standard namelist file actually exists:
        for file_ in definition_file:
            expect(os.path.isfile(file_),
                   "Namelist XML file %s not found!" % file_)

    # Create the namelist generator object - independent of instance:
    nmlgen = NamelistGenerator(case, definition_file)

    #-----------------------
    # Loop over all instances
    #-----------------------

    # Set input data list file name:
    input_data_list = os.path.join(caseroot, "Buildconf", "cam.input_data_list")

    # Determine the CAM confdir directory (and make it if it doesn't exist):
    confdir = os.path.join(caseroot, "Buildconf", "camconf")
    if not os.path.isdir(confdir):
        os.makedirs(confdir)

    # Convert instance number to integer:
    ninst = int(ninst_atm)

    for inst_counter in range(1, ninst+1):

        #----------------------
        # Remove old input data:
        #----------------------

        if os.path.isfile(input_data_list):
            os.remove(input_data_list)

        # -----------------------------------------------------
        # Determine instance string
        # -----------------------------------------------------

        inst_string = ""
        if ninst > 1:
            single_case_rpointer = os.path.join(rundir, "rpointer.atm")
            inst_string = '_%04d' % inst_counter
            instance_rpointer = os.path.join(rundir, "rpointer.atm"+inst_string)

            # If multi-instance case does not have restart file, use
            # single-case restart for each instance

            if os.path.isfile(single_case_rpointer) and \
               not os.path.isfile(instance_rpointer):
                shutil.copy(single_case_rpointer, instance_rpointer)
            # End if
        # End if

        # -----------------------------------------------------
        # Create camconf/namelist
        # -----------------------------------------------------

        infile_lines = []

        # Set "ncdata" namelist variable if doing a hybrid run:
        if run_type == 'hybrid':
            ncdata = _create_ic_filename(inst_string, 'i',
                                         run_refcase, run_refdate, run_reftod)
            # Fallback if no instance-specific file is found.
            if not os.path.isfile(os.path.join(rundir, ncdata)):
                ncdata = _create_ic_filename('', 'i', run_refcase,
                                             run_refdate, run_reftod)
            # End if
            infile_lines.append(" ncdata = '" + ncdata + "'")
            if ninst > 1:
                _LOGGER.info("%s is being used for ncdata", ncdata)
            # End if
        # Set "cam_branch_file" namelist variable if doing a branch run:
        elif run_type == 'branch':
            cam_branch_file = _create_ic_filename(inst_string, 'r',
                                                  run_refcase,
                                                  run_refdate, run_reftod)
            # Fallback if no instance-specific file is found.
            if not os.path.isfile(os.path.join(rundir, cam_branch_file)):
                cam_branch_file = _create_ic_filename('', 'r', run_refcase,
                                                      run_refdate, run_reftod)
            # End if
            infile_lines.append(" cam_branch_file = '" + cam_branch_file + "'")
            if ninst > 1:
                _LOGGER.info("%s is being used for cam_branch_file",
                             cam_branch_file)
            # End if

        # Set "state_debug_checks" namelist variable to true if DEBUG is true:
        if debug:
            infile_lines.append(" state_debug_checks = .true.")
            infile_lines.append(" debug_output = 2")
        # End if

        # Determine location and name of "user_nl_cam" files:
        user_nl_file = os.path.join(caseroot, "user_nl_cam" + inst_string)

        # Determine location and name of namelist input file:
        namelist_infile = os.path.join(confdir, "namelist_infile")

        # Create CIME namelist input file:
        create_namelist_infile(case, user_nl_file, namelist_infile,
                               "\n".join(infile_lines))

        # Convert namelist input file to list:
        namelist_infile_list = [namelist_infile]

        #-----------------------------
        # Initialize namelist defaults:
        #-----------------------------

        # Initalize namelist defaults in used namelis groups:
        nmlgen.init_defaults(namelist_infile_list, cam_nml_dict)

        #--------------------------
        # Write out namelist groups:
        #--------------------------

        # Create resolved CAM namelist file name:
        namelist_file = os.path.join(rundir, "atm_in")

        # Change namelist file name depending on instance:
        namelist_file += inst_string

        # Create CAM namelist using CIME's nmlgen routine:
        nmlgen.write_output_file(namelist_file, input_data_list,
                                 groups=config.nml_groups, sorted_groups=False)

###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "cam")
    # End with

if __name__ == "__main__":
    _main_func()
