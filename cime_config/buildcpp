#!/usr/bin/env python

"""
API for cam's configure
"""
#pylint: disable=multiple-imports, wrong-import-position, wildcard-import
#pylint: disable=invalid-name, unused-wildcard-import, too-many-locals
#pylint: disable=too-many-branches, too-many-statements
import os, sys, re

# Import CIME libraries/functions:
#--------------------------------
from standard_script_setup import *

from CIME.utils import run_cmd_no_fail
from CIME.case import Case
from CIME.buildnml import parse_input
#--------------------------------

# Location of "cime" external directory:
CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

# Check for location of CAM's "cime_config" directory:
testpath = os.path.join(CIMEROOT, os.pardir, "components", "cam", "cime_config")
if not os.path.isdir(testpath):
    testpath = os.path.join(CIMEROOT, os.pardir, "cime_config")
if not os.path.isdir(testpath):
    raise SystemExit("ERROR: cannot find cime_config for CAM")

# Add CAM's "cime_config" external directory to python path:
sys.path.append(os.path.abspath(testpath))

# Import CAM's configure structure:
from config_cam import Config_CAM

# Extract CIME log:
logger = logging.getLogger(__name__)

###############################################################################
def buildcpp(case):
###############################################################################
    """
    Invoke cam configure - output goes in `caseroot`/Buildconf/camconf
    """
    caseroot = case.get_value("CASEROOT")               # CIME case location
    exeroot = case.get_value("EXEROOT")                 # CESM Executable location
    atm_grid = case.get_value("ATM_GRID")               # Atmosphere (CAM) grid
    comp_ocn = case.get_value("COMP_OCN")               # CESM ocean component
    docn_mode = case.get_value("DOCN_MODE")             # Data-ocean (docn) mode
    mpilib = case.get_value("MPILIB")                   # MPI library
    nthrds_atm = case.get_value("NTHRDS_ATM")           # Number of CAM threads (OpenMP)
    cam_config_opts = case.get_value("CAM_CONFIG_OPTS") # CAM configuration options
    case_os    = case.get_value("OS")                   # Operating System
    case_nx    = case.get_value("ATM_NX")               # Number of x-dimension grid-points (longitudes)
    case_ny    = case.get_value("ATM_NY")               # Number of y-dimension grid-points (latitudes)

    # level information for CAM is part of the atm grid name - and must be stripped out
    case_nlev = ''
    match = re.match(r'(.+)z(\d+)', atm_grid)
    if match:
        atm_grid = match.groups()[0]
        case_nlev = match.groups()[1]

    # The following translation is hard-wired for backwards compatibility
    # to support the differences between how the scripts specify the land grid
    # and how it is specified internally

    if atm_grid == 'T31':
        atm_grid = '48x96'
    if atm_grid == 'T42':
        atm_grid = '64x128'
    if atm_grid == 'T85':
        atm_grid = '128x256'
    if atm_grid == 'T341':
        atm_grid = '512x1024'
    if atm_grid == 'ne30pg3':
        atm_grid = 'ne30np4.pg3'

    # Save user options as list:
    user_config_opts = [opt for opt in cam_config_opts.split(" ") if opt]

    #Un-comment once COSP is re-implemented into CAMDEN:
    #if "-cosp" in user_config_opts:
    #    user_config_opts += ["-cosp_libdir", os.path.join(exeroot, "atm", "obj", "cosp")]

    camconf = os.path.join(caseroot, "Buildconf", "camconf")
    if not os.path.isdir(camconf):
        os.makedirs(camconf)

    #+++++++++++++++++++++++++++++++++++++
    # Set CAM's configure/cppdef variables:
    #+++++++++++++++++++++++++++++++++++++
 
    # Initalize CAM "configure" object:
    config = Config_CAM()

    #----------------------------------------
    # Set CAM grid variables (nlat,nlon,nlev):
    #----------------------------------------

    # Set number of vertical levels:
    if case_nlev:
        # Save variable for CPPDEFs:
        nlev = case_nlev
    else:
        # Save variable for CPPDEFs:
        nlev = 30

    # Add vertical levels to configure object:
    nlev_desc = "Number of vertical levels."
    config.create_config("nlev", nlev_desc, nlev, (1,))

    # Add number of latitudes in grid to configure object:
    nlat_desc = "Number of unique latitude points in rectangular lat/lon grid."
    config.create_config("nlat", nlat_desc, case_ny, None)

    # Add number of longitudes in grid to configure object:     
    nlon_desc = "Number of unique longitude points in rectangular lat/lon grid."
    config.create_config("nlon", nlon_desc, case_nx, None)

    #------------------------
    # Set CAM physics columns
    #------------------------

    #Physics column per chunk:
    pcols_desc = "Maximum number of columns in a chunk (physics data structure)."
    config.create_config("pcols", pcols_desc, 16, (1,))
 
    #Physics sub-columns:
    psubcols_desc = "Maximum number of sub-columns in a column (physics data structure)."
    config.create_config("psubcols", psubcols_desc, 1, (1,))   

    #---------------------
    # Set dynamics options:
    #---------------------

    if "-dyn" in user_config_opts:
        # If dynamics flag is present, then set dynamics package to user specification:
        dyn = user_config_opts[user_config_opts.index("-dyn")+1]
        
        # Also replace "CAM_DYCORE" case variable with new dynamics package:
        case.set_value("CAM_DYCORE", dyn)      
    else:
        # Otherwise, set to grid default dynamics package:
        dyn = case.get_value("CAM_DYCORE")

    #Add dynamics option to configure object:
    dyn_valid_vals = ("eul", "fv", "se", "none")
    dyn_desc       = "Dynamics package: "+", ".join(dyn_valid_vals)

    config.create_config("dyn", dyn_desc, dyn, dyn_valid_vals)

    #--------------------
    # Set horizontal grid:
    #--------------------

    # Set valid horizontal grid options based on dynamical core being used:
    if dyn == "fv":
        hgrid_valid_vals = ("0.23x0.31", "0.47x0.63", "0.5x0.625", "0.9x1.25", 
                            "1x1.25", "1.9x2.5", "2x2.5", "2.5x3.33", 
                            "4x5", "10x15")
    elif dyn == "se":
        hgrid_valid_vals = ("ne5np4", "ne5np4.pg2", "ne5np4.pg3", "ne5np4.pg4", 
                            "ne16np4", "ne16np4.pg3", "ne30np4", "ne30np4.pg2", 
                            "ne30np4.pg3", "ne30np4.pg4", "ne60np4", "ne60np4.pg2", 
                            "ne60np4.pg3", "ne60np4.pg4", "ne120np4", "ne120np4.pg2",
                            "ne120np4.pg3", "ne120np4.pg4", "ne240np4", "ne240np4.pg2",
                            "ne240np4.pg3", "ne0np4TESTONLY.ne5x4", "ne0np4CONUS.ne30x8")
    elif dyn == "eul":
        hgrid_valid_vals = ("512x1024", "256x512", "128x256", "64x128", 
                            "48x96", "32x64", "8x16", "1x1")

        #If using the Eulerian dycore, then add wavenumber variables as well:
       
        #wavenumber variable descriptions:
        trm_desc = "Maximum Fourier wavenumber."
        trn_desc = "Highest degree of the Legendre polynomials for m=0."
        trk_desc = "Highest degree of the associated Legendre polynomials."

        #Add variables to configure object:
        config.create_config("trm", trm_desc, 1, (1,))
        config.create_config("trn", trn_desc, 1, (1,))
        config.create_config("trk", trk_desc, 1, (1,))
    else:
        hgrid_valid_vals = None

    # Add horizontal grid to configure object:
    hgrid_desc = "\n \
                 Horizontal grid specifier.  The recognized values depend on \n \
                 the dynamical core being used (if any)."
    config.create_config("hgrid", hgrid_desc, atm_grid, hgrid_valid_vals)

    #--------------------
    # Set ocean component
    #--------------------

    ocn_valid_vals = ("docn", "dom", "som", "socn", "aquaplanet", "pop", "mom")
  
    ocn_desc = "\n \
                Use data ocean model (docn or dom), stub ocean (socn), or aqua planet ocean \n \
                (aquaplanet) in cam build.  When built from the CESM scripts the value of \n \
                ocn may be set to pop or mom.  This doesn't impact how CAM is built, only how \n \
                attributes are matched when searching for namelist defaults.  If ocn is set \n \
                to som then the docn component is used."

    # The ocean component setting is only used by CAM to do attribute matching for
    # setting default tuning parameter values.  In SOM mode we want to use the same
    # tunings as the fully coupled B compset, so set the ocean component to pop in
    # that case.
    
    if docn_mode == 'som':
        config.create_config("ocn", ocn_desc, "pop", ocn_valid_vals)
    else:
        config.create_config("ocn", ocn_desc, comp_ocn, ocn_valid_vals)

    #++++++++++++++++++++

    # Print CAM configure settings and values to debug logger:
    config.print_all()

    #+++++++++++++++++++++++++
    #Create CAM's cppdefs list:
    #+++++++++++++++++++++++++ 

    #Retrieve number of physics columns:
    pcols = config.get_value("pcols")

    #Retrieve number of physics subcolumns:
    psubcols = config.get_value("psubcols")

    # Set grid-related cppdefs:
    cam_cppdefs = \
    " -DPLON={} -DPLAT={} -DPLEV={} -DPCOLS={} -DPSUBCOLS={}".format(case_nx,case_ny,nlev,pcols,psubcols)  

    # Set wavenumber-related cppdefs if using Eulerian dycore:
    if dyn == "eul":
        
        #Retrieve wavenumber values:
        trm = config.get_value("trm")
        trn = config.get_value("trn")
        trk = config.get_value("trk")

        #Add to cppdefs:
        cam_cppdefs += " -DPTRM={} -DPTRN={} -DPTRK={}".format(trm,trn,trk)

    #---------------------------
    # Set system-related cppdefs:
    #---------------------------
    if mpilib == 'mpi-serial':
        cam_cppdefs += " -DSPMD"

    if int(nthrds_atm) == 1:
        cam_cppdefs += " -DTHREADED_OMP" 

    #Set GPTL timing cppdefs:
    if case_os.lower() == 'aix' or case_os.lower() == 'bg' or case_os.lower() == 'darwin':
        cam_cppdefs += " -DHAVE_VPRINTF -DHAVE_TIMES -DHAVE_GETTIMEOFDAY -DHAVE_COMM_F2C"
    else:
        cam_cppdefs += " -DHAVE_VPRINTF -DHAVE_TIMES -DHAVE_GETTIMEOFDAY -DHAVE_COMM_F2C -DHAVE_NANOTIME -DBIT64 -DHAVE_SLASHPROC"
    #---------------------------

    # Update the case variable CAM_CPPDEFS with the above CPP definitions:
    case.set_value("CAM_CPPDEFS", cam_cppdefs)

    # Write the case variables to the case's XML files:
    case.flush()

    #Print CAM CPPDEFs to case log:
    logger.info("CAM_CPPDEFS: %s", cam_cppdefs)

    # Return CAM config object to _main_func():
    return config

###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        config = buildcpp(case)

if __name__ == "__main__":
    _main_func()
