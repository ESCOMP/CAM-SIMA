#!/usr/bin/env python

"""
create the cam library
"""
# Python system imports
import sys
import os
import filecmp
import glob
import shutil
import logging

from cam_config import ConfigCAM # CAM's configure structure
from cam_build_cache import BuildCacheCAM # Re-build consistency cache

#CAM's fortran auto-generation routines:
from cam_autogen import generate_registry, generate_physics_suites
from cam_autogen import generate_init_routines

# Check for the CIME library, and add it
# to the python path:
__CIMEROOT = os.environ.get("CIMEROOT")
if __CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(__CIMEROOT, "scripts", "lib"))

#pylint: disable=wrong-import-position
# CIME imports
from CIME.case import Case
from CIME.utils import run_cmd, expect
from CIME.utils import check_minimum_python_version, stop_buffering_output
from CIME.buildlib import parse_input
from CIME.build import get_standard_makefile_args
#pylint: enable=wrong-import-position

check_minimum_python_version(2, 7)
stop_buffering_output()

_LOGGER = logging.getLogger(__name__)

###############################################################################
def _build_cam():
###############################################################################
    """Configure and build CAM"""
    caseroot, libroot, bldroot = parse_input(sys.argv)

    with Case(caseroot) as case:

        # Case variables
        casetools = case.get_value("CASETOOLS")
        atm_root = case.get_value("COMP_ROOT_DIR_ATM")
        gmake_j = case.get_value("GMAKE_J")
        gmake = case.get_value("GMAKE")

        # Case-derived variables
        source_mods_dir = os.path.join(caseroot, "SourceMods", "src.cam")

        # Set logging level
        if case.get_value("DEBUG"):
            # CIME blocks this change so create a handler with DEBUG level
            handler = logging.StreamHandler(stream=sys.stdout)
            handler.setLevel(logging.DEBUG)
            _LOGGER.handlers = [handler]
            _LOGGER.setLevel(logging.DEBUG)
        else:
            _LOGGER.setLevel(logging.INFO)
        # End if

        # CAM config object and variables
        config = ConfigCAM(case, _LOGGER)
        dycore = config.get_value('dyn')
        reg_config = {}

        # Set fortran indendation level (number of spaces
        # generated fortran code is indented depending on the scope):
        gen_fort_indent = 3

        # Set possible locations to search for generation routines
        # with the SourceMods directory searched first:
        data_path = os.path.join(atm_root, "src", "data")
        data_search = [source_mods_dir, data_path]

        # Append CCPP-framework to python path:
        spin_scripts_path = os.path.join(atm_root, "ccpp_framework", "scripts")

        #-------------------------------------------------------
        # Load a build cache, if available
        #-------------------------------------------------------
        build_cache = BuildCacheCAM(os.path.join(bldroot,
                                                 "cam_build_cache.xml"))
        #-------------------------------------------------------
        # Create the physics derived data types
        #-------------------------------------------------------
        reg_dir, force_ccpp, reg_files = generate_registry(data_search,
                                                           build_cache, atm_root,
                                                           bldroot, source_mods_dir,
                                                           dycore, gen_fort_indent,
                                                           reg_config)

        #-------------------------------------------------------
        # Call SPIN (CCPP Framework) to generate glue code
        #-------------------------------------------------------

        phys_dirs, force_init, cap_datafile = \
                               generate_physics_suites(spin_scripts_path,
                                                       build_cache, case, config,
                                                       atm_root, bldroot, reg_dir,
                                                       reg_files, source_mods_dir,
                                                       force_ccpp)

        #-------------------------------------------------------
        # Create host model variable initialization routines
        #-------------------------------------------------------
        init_dir = generate_init_routines(data_search,
                                          build_cache, bldroot,
                                          reg_files, force_ccpp,
                                          force_init, gen_fort_indent,
                                          cap_datafile)

        #--------------------------------------------------------------
        # write out the cache here as we have completed pre-processing
        #--------------------------------------------------------------
        build_cache.write()

        #-------------------------------------------------------
        # Create the Filepath file with all the paths needed
        # to build this configuration of CAM
        #-------------------------------------------------------
        filepath_src = os.path.join(caseroot, "Buildconf",
                                    "camconf", "Filepath")
        filepath_dst = os.path.join(bldroot, "Filepath")
        paths = [source_mods_dir, reg_dir, init_dir,
                 os.path.join(atm_root, "src", "data"),
                 os.path.join(atm_root, "src", "control"),
                 os.path.join(atm_root, "src", "cpl",
                              case.get_value("COMP_INTERFACE")),
                 os.path.join(atm_root, "src", "dynamics", dycore),
                 os.path.join(atm_root, "src", "physics", "utils"),
                 os.path.join(atm_root, "src", "utils")]
        for path in phys_dirs:
            if path not in paths:
                paths.append(path)
            # End if
        # End for
        #If using the CMEPS/NUOPC coupler, then add additional path:
        if case.get_value("COMP_INTERFACE") == "nuopc":
            paths.append(os.path.join(__CIMEROOT, "src", "drivers",
                                      "nuopc", "nuopc_cap_share"))
        # End if
        with open(filepath_src, "w") as filepath:
            filepath.write("\n".join(paths))
            filepath.write("\n")
        # End with

        # Move Filepath to the bld directory unless it has not changed
        if os.path.isfile(filepath_dst):
            if not filecmp.cmp(filepath_src, filepath_dst):
                shutil.move(filepath_src, filepath_dst)
            # End if
        else:
            shutil.move(filepath_src, filepath_dst)
        # End if

        #-------------------------------------------------------
        # build the library
        #-------------------------------------------------------
        complib = os.path.join(libroot, "libatm.a")
        makefile = os.path.join(casetools, "Makefile")

        cmd = "{} complib -j {} MODEL=cam COMPLIB={} -f {} {} " \
            .format(gmake, gmake_j, complib, makefile,
                    get_standard_makefile_args(case))

        retcode, out, err = run_cmd(cmd)
        _LOGGER.info("%s: \n\n output:\n %s \n\n err:\n\n%s\n", cmd, out, err)
        expect(retcode == 0, "Command {} failed with rc={}".format(cmd, retcode))

###############################################################################

if __name__ == "__main__":
    _build_cam()
